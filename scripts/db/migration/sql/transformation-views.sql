-- Transformation Views for Selective Migration
-- These views will be parameterized by the Bun migration runner
-- Variables: $source_company_id, $target_org_id

-- Drop existing views if they exist
DROP VIEW IF EXISTS organizations_transformed;
DROP VIEW IF EXISTS leads_custom_fields_definitions_transformed;
DROP VIEW IF EXISTS leads_transformed;
DROP VIEW IF EXISTS conversions_transformed;
DROP VIEW IF EXISTS segments_transformed;
DROP VIEW IF EXISTS webhooks_transformed;
DROP VIEW IF EXISTS migration_validation;

-- ============================================================================
-- ORGANIZATIONS TRANSFORMATION
-- ============================================================================
CREATE VIEW organizations_transformed AS
SELECT 
  $target_org_id as id,  -- New nanoid generated by migration runner
  name,
  NULLIF(trim(domain), '') as website,  -- Map domain to website
  NULLIF(trim(logo), '') as logo,
  NULLIF(trim(email), '') as email,
  active as is_active,  -- Map active to is_active
  created_at::timestamptz,
  COALESCE(updated_at, created_at)::timestamptz as updated_at
FROM companies 
WHERE id = $source_company_id 
  AND active = true;

-- ============================================================================
-- LEADS CUSTOM FIELD DEFINITIONS TRANSFORMATION  
-- ============================================================================
CREATE VIEW leads_custom_fields_definitions_transformed AS
SELECT
  id, -- Preserve original custom field definition ID
  $target_org_id as organization_id,
  field_key,
  label,
  COALESCE(expected_type, 'text') as type,  -- Map expected_type to type
  NULLIF(trim(description), '') as description,
  COALESCE(is_required, false) as is_required,
  created_at::timestamptz,
  COALESCE(updated_at, created_at)::timestamptz as updated_at
FROM leads_custom_fields_definitions
WHERE company_id = $source_company_id;

-- ============================================================================
-- LEADS TRANSFORMATION
-- ============================================================================
CREATE VIEW leads_transformed AS
SELECT
  id, -- Preserve original UUID for referential integrity
  $target_org_id as organization_id,
  NULLIF(trim(name), '') as name,
  NULLIF(trim(email), '') as email,
  NULLIF(trim(secondary_email), '') as secondary_email,
  NULLIF(trim(phone), '') as phone,
  NULLIF(trim(secondary_phone), '') as secondary_phone,
  NULLIF(trim(company), '') as company,
  NULLIF(trim(job_title), '') as job_title,
  COALESCE(import_method, 'unknown') as import_method,
  id::text as external_id, -- Use original UUID as external ID
  'legacy_migration' as external_source,
  -- Fit score normalization (handle both upper and lower case)
  UPPER(COALESCE(NULLIF(trim(fit_score), ''), 'F')) as fit_score,
  COALESCE(interest, 0) as interest,
  COALESCE(number_conversions, 0) as total_conversions,
  first_conversion_date::timestamptz as first_conversion_date,
  last_conversion_date::timestamptz as last_conversion_date,
  -- First conversion UTM mapping
  NULLIF(trim(first_traffic_source_source), '') as first_conversion_utm_source,
  NULLIF(trim(first_traffic_source_medium), '') as first_conversion_utm_medium,
  NULLIF(trim(first_traffic_source_campaign), '') as first_conversion_utm_campaign,
  NULLIF(trim(first_traffic_source_content), '') as first_conversion_utm_content,
  NULLIF(trim(first_traffic_source_term), '') as first_conversion_utm_term,
  -- Last conversion UTM mapping
  NULLIF(trim(last_traffic_source_source), '') as last_conversion_utm_source,
  NULLIF(trim(last_traffic_source_medium), '') as last_conversion_utm_medium,
  NULLIF(trim(last_traffic_source_campaign), '') as last_conversion_utm_campaign,
  NULLIF(trim(last_traffic_source_content), '') as last_conversion_utm_content,
  NULLIF(trim(last_traffic_source_term), '') as last_conversion_utm_term,
  -- Handle tags array via JSON for compatibility with Bun SQL
  CASE 
    WHEN tags IS NULL OR array_length(tags, 1) IS NULL THEN '[]'::text
    ELSE array_to_json(tags)::text
  END as tags_json,
  '' as notes, -- Not available in source
  created_at::timestamptz,
  now() as updated_at
FROM leads
WHERE company_id = $source_company_id
  AND ((email IS NOT NULL AND trim(email) != '') 
       OR (phone IS NOT NULL AND trim(phone) != ''));

-- ============================================================================
-- CONVERSIONS TRANSFORMATION (WITH DEDUPLICATION)
-- ============================================================================
CREATE VIEW conversions_transformed AS
WITH duplicate_analysis AS (
  -- Identify duplicate groups by business logic (same payload = same business event)
  SELECT 
    payload_raw_json,
    ARRAY_AGG(id ORDER BY id) as duplicate_ids,
    COUNT(*) as duplicate_count
  FROM conversions 
  WHERE company_id = $source_company_id
    AND contact_id IS NOT NULL
    AND conversion_name IS NOT NULL 
    AND trim(conversion_name) != ''
  GROUP BY payload_raw_json
  HAVING COUNT(*) > 1
),
ids_to_exclude AS (
  -- Keep first ID from each duplicate group, exclude the rest
  SELECT UNNEST(duplicate_ids[2:]) as exclude_id
  FROM duplicate_analysis
)
SELECT
  id, -- Preserve original UUID
  $target_org_id as organization_id,
  contact_id as lead_id, -- Maps to leads.id (preserved UUIDs)
  NULLIF(trim(conversion_name), '') as name,
  NULLIF(trim(conversion_identifier), '') as identifier,
  '' as external_id, -- Not available in source
  'legacy_migration' as external_source,
  conversion_date::timestamptz as date,
  CASE 
    WHEN conversion_value IS NOT NULL AND conversion_value != 0
    THEN conversion_value
    ELSE NULL 
  END as value,
  NULLIF(trim(source), '') as source,
  NULLIF(trim(traffic_source_source), '') as utm_source,
  NULLIF(trim(traffic_source_medium), '') as utm_medium,
  NULLIF(trim(traffic_source_campaign), '') as utm_campaign,
  NULLIF(trim(traffic_source_content), '') as utm_content,
  NULLIF(trim(traffic_source_term), '') as utm_term,
  NULLIF(trim(traffic_source_channel), '') as utm_channel,
  NULLIF(trim(conversion_url), '') as conversion_url,
  NULLIF(trim(conversion_domain), '') as conversion_domain,
  NULLIF(trim(device), '') as device,
  -- Payload is already clean JSONB in source
  COALESCE(payload_raw_json, '{}'::jsonb) as raw_payload,
  '' as idempotency_hash, -- Will be generated by database trigger
  now() as created_at
FROM conversions
WHERE company_id = $source_company_id
  AND contact_id IS NOT NULL
  AND conversion_name IS NOT NULL 
  AND trim(conversion_name) != ''
  AND id NOT IN (SELECT exclude_id FROM ids_to_exclude); -- Exclude duplicate IDs

-- ============================================================================
-- WEBHOOKS TRANSFORMATION
-- ============================================================================
CREATE VIEW webhooks_transformed AS
SELECT
  -- Generate new nanoid for webhook ID (not preserving original UUID)
  id as source_id, -- Keep original ID for reference, will generate nanoid in migration runner
  $target_org_id as organization_id,
  NULLIF(trim(name), '') as name,
  NULLIF(trim(description), '') as description,
  -- Note: endpoint_url is NOT included as it doesn't exist in new schema
  -- Note: secret_key will be generated by database default (not in old schema)
  field_mapping,
  sample_payload,
  COALESCE(is_active, true) as is_active,
  created_at::timestamptz,
  COALESCE(updated_at, created_at)::timestamptz as updated_at
FROM webhooks
WHERE company_id = $source_company_id
  AND name IS NOT NULL
  AND trim(name) != '';

-- ============================================================================
-- SEGMENTS TRANSFORMATION
-- ============================================================================  
CREATE VIEW segments_transformed AS
SELECT
  id, -- Preserve original segment ID
  $target_org_id as organization_id,
  NULLIF(trim(name), '') as name,
  NULLIF(trim(description), '') as description,
  COALESCE(rule_json, '{}'::jsonb) as rule_json, -- Will be transformed in migration runner
  created_at::timestamptz,
  COALESCE(updated_at, created_at)::timestamptz as updated_at
FROM segments
WHERE company_id = $source_company_id
  AND name IS NOT NULL
  AND trim(name) != '';

-- ============================================================================
-- VALIDATION VIEW
-- ============================================================================
CREATE VIEW migration_validation AS
SELECT 
  'leads_missing_contact' as issue,
  count(*) as count
FROM leads 
WHERE company_id = $source_company_id
  AND (email IS NULL OR trim(email) = '') 
  AND (phone IS NULL OR trim(phone) = '')
UNION ALL
SELECT 
  'conversions_orphaned',
  count(*)
FROM conversions c
LEFT JOIN leads l ON c.contact_id = l.id AND l.company_id = $source_company_id
WHERE c.company_id = $source_company_id
  AND l.id IS NULL
UNION ALL
SELECT
  'conversions_missing_name',
  count(*)
FROM conversions
WHERE company_id = $source_company_id
  AND (conversion_name IS NULL OR trim(conversion_name) = '')
UNION ALL
SELECT
  'custom_fields_orphaned',
  count(*)
FROM leads_custom_fields cf
LEFT JOIN leads l ON cf.lead_id = l.id AND l.company_id = $source_company_id  
WHERE cf.company_id = $source_company_id
  AND l.id IS NULL
UNION ALL
SELECT
  'source_company_exists',
  count(*)
FROM companies
WHERE id = $source_company_id
  AND active = true;